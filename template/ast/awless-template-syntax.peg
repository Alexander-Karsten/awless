# PEG for awless template syntax
package ast

# parser declaration

type Peg Peg {
 *AST
}

Script   <- Spacing Statement+ EndOfFile
Statement <- Spacing (VarDeclaration / Expr / Declaration / Comment) Spacing EndOfLine*
Action <- 'create' / 'delete' / 'start' / 'stop' / 'update' / 'attach' / 'check' / 'detach'
Entity <- 'vpc' / 'subnet' / 'instance' / 'volume' / 'tags' / 'user' / 'group' / 'role' / 'policy' / 'keypair' / 'securitygroup' / 'internetgateway' / 'routetable' / 'route' / 'bucket' / 'storageobject'
VarDeclaration <- Var
                <Identifier> { p.AddVarIdentifier(text) }
                Equal
                VarValue  { p.LineDone() }
Declaration <- <Identifier> { p.AddDeclarationIdentifier(text) }
               Equal
               Expr
Expr <- <Action> { p.AddAction(text) }
        MustWhiteSpacing <Entity> { p.AddEntity(text) }
        (MustWhiteSpacing Params)? { p.LineDone() }

Params <- Param+
Param <- <Identifier> { p.AddParamKey(text) }
         Equal
         Value
         WhiteSpacing

Identifier <- [a-zA-Z-_.]+
Value <- HoleValue {  p.AddParamHoleValue(text) }
        / AliasValue {  p.AddParamAliasValue(text) }
        / RefValue {  p.AddParamRefValue(text) }
        / <CidrValue> { p.AddParamCidrValue(text) }
        / <IpValue> { p.AddParamIpValue(text) }
        / <IntRangeValue> { p.AddParamValue(text) }
        / <IntValue> { p.AddParamIntValue(text) }
        / <StringValue> { p.AddParamValue(text) }

VarValue <- HoleValue {  p.AddVarHoleValue(text) }
            / <CidrValue> { p.AddVarCidrValue(text) }
            / <IpValue> { p.AddVarIpValue(text) }
            / <IntRangeValue> { p.AddVarValue(text) }
            / <IntValue> { p.AddVarIntValue(text) }
            / <StringValue> { p.AddVarValue(text) }

StringValue <- [a-zA-Z0-9-._:/]+
CidrValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+'/'[0-9]+
IpValue <- [0-9]+.[0-9]+.[0-9]+.[0-9]+
IntValue <- [0-9]+
IntRangeValue <- [0-9]+'-'[0-9]+
RefValue <- '$'<Identifier>
AliasValue <- '@'<Identifier>
HoleValue <- '{'WhiteSpacing<Identifier>WhiteSpacing'}'

Comment <- '#'(!EndOfLine .)* / '//'(!EndOfLine .)* { p.LineDone() }

Spacing <- Space*
WhiteSpacing <- Whitespace*
MustWhiteSpacing <- Whitespace+
Equal <- Spacing '=' Spacing
Var <- Spacing 'var' Spacing
Space   <- Whitespace / EndOfLine
Whitespace   <- ' ' / '\t'
EndOfLine <- '\r\n' / '\n' / '\r'
EndOfFile <- !.